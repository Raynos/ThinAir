// Generated by CoffeeScript 1.3.1
(function() {
  var Validator, check, fs;

  check = require("validator").check;

  fs = require("fs");

  Validator = {
    validationErrors: [],
    validate: function(modelName, object, callback) {
      var that, validationsFilePath;
      validationsFilePath = __dirname + "/../app/validations/" + modelName + ".validations.json";
      that = this;
      return fs.stat(validationsFilePath, function(err) {
        var content, fieldName, fieldValidationIndex, validations;
        if (err) {
          return console.log("Error reading validations file.");
        } else {
          content = fs.readFileSync(validationsFilePath, "utf8");
          validations = JSON.parse(content);
          that.validationErrors = [];
          for (fieldValidationIndex in validations) {
            for (fieldName in validations[fieldValidationIndex]) {
              that.validateField(fieldName, validations[fieldValidationIndex][fieldName], object[fieldName]);
            }
          }
          return callback((that.validationErrors.length > 0 ? that.validationErrors : null));
        }
      });
    },
    flashErrors: function(req, errors) {
      var errorIndex, _results;
      _results = [];
      for (errorIndex in errors) {
        _results.push(this.messages.addMessage(req, "error", errors[errorIndex]));
      }
      return _results;
    },
    validateField: function(fieldName, fieldValidations, value) {
      var validator, validatorIndex, _results;
      _results = [];
      for (validatorIndex in fieldValidations) {
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (validator in fieldValidations[validatorIndex]) {
            _results1.push(this.useValidator(fieldName, validator, fieldValidations[validatorIndex][validator], value));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    },
    useValidator: function(fieldName, validatorName, argument, value) {
      switch (validatorName) {
        case "minimumLength":
          return this.validatorMinimumLength(fieldName, value, argument);
        default:
          return console.log("Validator (" + validatorName + ") has not been found.");
      }
    },
    validatorMinimumLength: function(fieldName, value, length) {
      var errorMessage;
      errorMessage = "The value entered for \"" + fieldName + "\" (" + value + ") is too short (minimum of " + length + " character(s)).";
      try {
        return check(value, errorMessage).len(length);
      } catch (e) {
        return this.validationErrors.push(e.message);
      }
    }
  };

  module.exports = Validator;

}).call(this);
